/*************************************************************************/
/*Program     : hw3.java                                       */
/*Date        : 2/20/2014                                                */
/*Author      : Sreenidhi Krishna                                        */
/*Description : This program executes jSwing commands to create GUI      */
/*oracle account username : skrishn2				         */
/* 		 password : abc						 */
/*  									 */
/*************************************************************************/

import java.io.BufferedReader;  
import java.io.FileReader;  
import java.util.StringTokenizer;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.IOException;
/**
 *
 * @author user
 */
public class hw3 extends javax.swing.JFrame
{
	
    ArrayList<Integer> value_polygon= new ArrayList<Integer>();
    Polygon s= new Polygon();
    
    Image campusmap;
    ImageIcon map;
    
    public hw3()
 	{
     initComponents();
     ImageIcon imgi = new ImageIcon("./map.jpg"); //Imports the campus map
     map=imgi;
     jLabel1.setIcon(imgi);
     campusmap=imgi.getImage();
         
     }
  
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
  
    public int querynum=0;
    int value=1;
    int xcoordinates=0,ycoordinates=0,x2=0,y2=0,initialvalue_x = 0,initialvalue_y = 0;
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	
    Boolean queryrange= false;
    Boolean queryclosesthydrant=false;

    private void initComponents()
	{
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sreenidhi Krishna 1094657: DBMS_Homework3");
        setAlwaysOnTop(true);

        jPanel1.setPreferredSize(new java.awt.Dimension(820, 580));

        jLabel1.setToolTipText("");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        jLabel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jLabel1MouseMoved(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 820, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jTextField1.setText("Location of mouse pointer");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Active Feature Type", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Cambria", 1, 14))); // NOI18N

        jCheckBox1.setText("buildings");
        jCheckBox1.setName(""); // NOI18N

        jCheckBox2.setText("buildings on fire");

        jCheckBox3.setText("hydrants");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jCheckBox3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                    .addComponent(jCheckBox2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                    .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE))
                .addGap(67, 67, 67))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addGap(18, 18, 18)
                .addComponent(jCheckBox2)
                .addGap(18, 18, 18)
                .addComponent(jCheckBox3)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Query", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Cambria Math", 1, 14))); // NOI18N

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("wholeregion query");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Range query");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setText("find neighbor buidings");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton4);
        jRadioButton4.setText("find closest hydrants");
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jRadioButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                    .addComponent(jRadioButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jRadioButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jRadioButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(jRadioButton1)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton2)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton3)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton4)
                .addGap(18, 18, 18))
        );

        jButton1.setText("submit query");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("SQL query");
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1073, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel1MouseMoved(java.awt.event.MouseEvent evt) //generates coordinates of mouse pointer
	{//GEN-FIRST:event_jLabel1MouseMoved
        int valuex = evt.getX();
        int valuey = evt.getY();
        String xy_pos= "Location of mouse pointer:("+valuex+","+valuey+")";
        jTextField1.setText(xy_pos);
       
    }//GEN-LAST:event_jLabel1MouseMoved

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)
	{
     
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
    	int a=0,b=0,c=0;
    	Graphics g= jLabel1.getGraphics();
        g.drawImage(campusmap,0 , 0, this);
     
        if(jRadioButton1.isSelected())
        {
            
                if(jCheckBox1.isSelected()) //Active feature : buildings
                {
                	a=1;
                    ArrayList<Integer> list_points= new ArrayList<Integer>();
                    ArrayList<Integer> list_numpoints= new ArrayList<Integer>();
                    populate pd= new populate();
                    databasequery q=new databasequery();
                    pd.connectDB();
              
                    list_points= q.wholeRegion_vert();
                
                    list_numpoints = q.wholeRegion_num();
       
                    function_draw_building(list_points,list_numpoints,Color.YELLOW);
        
                }
                if(jCheckBox2.isSelected()) //Active feature : fire buildings
                {   
                	b=1;
                    ArrayList<Integer> list_points= new ArrayList<Integer>();
                    ArrayList<Integer> list_numpoints= new ArrayList<Integer>();
                    populate pd= new populate();
                    pd.connectDB();
                    databasequery q=new databasequery();
                    list_points= q.wholeRegion_vertfirebuilding();
                    list_numpoints = q. wholeRegion_numfirebuilding();
                    function_draw_building(list_points,list_numpoints,Color.RED);
                }
                if(jCheckBox3.isSelected()) //Active feature : hydrants
                {   
                	c=1;
                    ArrayList<Integer> list_points= new ArrayList<Integer>();
                    populate pd= new populate();
                    pd.connectDB();
                    databasequery q=new databasequery();
                    list_points = q.wholeRegion_hydrant();
      
                    function_draw_hydrant(list_points);
                }

                querynum++;
                String statement=" ";
                String stmt1= "  SELECT t.X,t.Y FROM building Tb, TABLE(SDO_UTIL.GETVERTICES(Tb.building_shape)) t \n" 
         	   +"SELECT (SDO_UTIL.GETNUMVERTICES(building_shape)) from building \n \n";       
                String stmt2 ="SELECT t.X,t.Y FROM building Tb, TABLE(SDO_UTIL.GETVERTICES(Tb.building_shape)) t where building_on_fire='y' \n" 
             		   +"SELECT (SDO_UTIL.GETNUMVERTICES(building_shape)) from building where building_on_fire='y' \n\n";
                String stmt3 ="SELECT t.X,t.Y FROM hydrant Tb, TABLE(SDO_UTIL.GETVERTICES(Tb.hydrant_coord)) t  \n ";
                
                //Displays the query in text box       
                if(a==1)
                statement= statement+stmt1;
                if(b==1)
                statement= statement+stmt2;
                if(c==1)
                statement= statement+stmt3;
                        
                statement= "\nQuery: " + querynum + statement;
                jTextArea1.append(statement);
       
        }
        else if(jRadioButton2.isSelected())
        {   int u=0,v=0,w=0;
        	Graphics g1 = jLabel1.getGraphics();
            g1.setColor(Color.RED);
            g1.drawPolygon(s);
        		         		
               if(jCheckBox1.isSelected()) //Active feature : buildings
                {   
            	   u=1;
                    ArrayList<Integer> list_points= new ArrayList<Integer>();
                    ArrayList<Integer> list_numpoints= new ArrayList<Integer>();
                    databasequery q=new databasequery();
                    list_points= q.range_vertbuilding(value_polygon);
                    list_numpoints = q.range_numbuilding(value_polygon);
                    function_draw_building(list_points,list_numpoints,Color.YELLOW);
                }
               if(jCheckBox2.isSelected()) //Active feature : fire buildings
                {   
            	   v=1;
                    ArrayList<Integer> list_points= new ArrayList<Integer>();
                    ArrayList<Integer> list_numpoints= new ArrayList<Integer>();
                    databasequery q=new databasequery();
                                        
                    list_points= q.range_vertfirebuidling(value_polygon);
                    list_numpoints = q.range_numfirebuilding(value_polygon);
                    function_draw_building(list_points,list_numpoints,Color.RED);
                }
                if(jCheckBox3.isSelected()) //Active feature : hydrants
                {   
                	w=1;
                    ArrayList<Integer> list_points= new ArrayList<Integer>();
                    populate pd= new populate();
                    databasequery q=new databasequery();
                    list_points= q.range_hydrant(value_polygon);
                    function_draw_hydrant(list_points);
                }
                
                querynum++;
                String statement=" ";
                
                String stmt1= "  SELECT t.X,t.Y FROM building B, TABLE(SDO_UTIL.GETVERTICES(B.building_shape)) t "
                                 + "WHERE sdo_relate(B.building_shape, "
                                 + "SDO_Geometry (2003, null, null,SDO_ELEM_INFO_ARRAY(1,1003,1),"
                                 + "SDO_ORDINATE_ARRAY(s1)), "
                                 + "'mask=ANYINTERACT') = 'TRUE' \n" 
         						+"SELECT (SDO_UTIL.GETNUMVERTICES(building_shape)) FROM building B "
                                 + "WHERE sdo_relate(B.building_shape, "
                                 + "SDO_Geometry (2003, null, null,SDO_ELEM_INFO_ARRAY(1,1003,1),"
                                 + "SDO_ORDINATE_ARRAY(s1)), "
                                 + "'mask=ANYINTERACT') = 'TRUE' \n\n" ;
                
                String stmt2=" SELECTt t.X,t.Y FROM building B, TABLE(SDO_UTIL.GETVERTICES(B.building_shape)) t "
                        + "WHERE sdo_relate( b.building_shape,"
                        + "SDO_Geometry (2003, null, null,SDO_ELEM_INFO_ARRAY(1,1003,1),"
                        + "SDO_ORDINATE_ARRAY(s1)), "
                        + "'mask=ANYINTERACT') = 'TRUE' and "
                        + "b.building_on_fire ='y' \n" 
         				+"SELECT (SDO_UTIL.GETNUMVERTICES(building_)) FROM building B "
                        + "WHERE sdo_relate(B.building_shape, "
                        + "SDO_Geometry (2003, null, null,SDO_ELEM_INFO_ARRAY(1,1003,1),"
                        + "SDO_ORDINATE_ARRAY(s1)), "
                        + "'mask=ANYINTERACT') = 'TRUE' and b.building_on_fire='y' \n\n" ;
                
                String stmt3= " SELECT t.X,t.Y FROM hydrant h, TABLE(SDO_UTIL.GETVERTICES(h.hydrant_coord)) t "
                        + "WHERE sdo_relate( h.hydrant_coord,"
                        + "SDO_Geometry (2003, null, null,SDO_ELEM_INFO_ARRAY(1,1003,1),"
                        + "SDO_ORDINATE_ARRAY(s1)), "
                        + "'mask=ANYINTERACT') = 'TRUE' \n";
	 	//Displays the query in text box 
                if(u==1)
                statement= statement+stmt1;
                if(v==1)
                statement= statement+stmt2;
                if(w==1)
                statement= statement+stmt3;
                        
                statement= "\nQuery: " + querynum + statement;
                jTextArea1.append(statement); 
    
        }
        else if(jRadioButton3.isSelected())
        {
                   
        	//To be executed irrespective of active feature selection
        	
        	    //Draw buildings
        	    ArrayList<Integer> list_points= new ArrayList<Integer>();
                    ArrayList<Integer> list_numpoints= new ArrayList<Integer>();
                    databasequery q=new databasequery();
                    list_points= q.neighbour_vertbuilding();
                    list_numpoints = q.neighbour_numbuilding();
                    function_draw_building(list_points,list_numpoints,Color.YELLOW);
                    
                    //Draw fire buildings
                    populate p= new populate();
                    p.connectDB();
                    databasequery qq=new databasequery();
                    list_points=qq.wholeRegion_vertfirebuilding();
                    list_numpoints=qq.wholeRegion_numfirebuilding();
                    function_draw_building(list_points,list_numpoints,Color.RED);
            
           
        }
                      
    }//GEN-LAST:event_jButton1MouseClicked

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt)
	{//GEN-FIRST:event_jLabel1MouseClicked
        if(queryrange==true)
        {
            Graphics g1 = jLabel1.getGraphics();
            g1.setColor(Color.RED);
            s.addPoint(evt.getX(),evt.getY());
            if(SwingUtilities.isLeftMouseButton(evt))
            {    
                 //Get the coordinates for drawing the polygon
                 if(value==1)
                    {
                         xcoordinates= evt.getX();
                         ycoordinates= evt.getY();
                         initialvalue_x=xcoordinates;
                         initialvalue_y=ycoordinates;
                         value++;
                    }
                 else if(value>=2)
                    {
                         x2=evt.getX();
                         y2= evt.getY();
                         value++;
                         g1.drawLine(xcoordinates, ycoordinates, x2, y2);
                         xcoordinates=x2;
                         ycoordinates=y2;
                    }
             
            }
            if(SwingUtilities.isRightMouseButton(evt))
            {
                  xcoordinates= evt.getX();
                  ycoordinates= evt.getY();
                  g1.drawLine(x2, y2, xcoordinates, ycoordinates);
                  g1.drawLine(xcoordinates, ycoordinates,initialvalue_x, initialvalue_y);
                  g1.setColor(Color.green);
            
                  for(int i=0;i<s.npoints;i++)
                   {
            
                     value_polygon.add(s.xpoints[i]);
                     value_polygon.add(s.ypoints[i]);
                   }
                   System.out.println("Number of vertices selected " +(s.npoints-1));
                   System.out.println("Coordinates of Polygon selected" +value_polygon);

                 
              }
        }
        if(queryclosesthydrant==true)
        {
            String s;
            int x = evt.getX();
            int y = evt.getY();
            s=x+","+y;
            System.out.println("\nMouse coordinate selected is " +x+ ","  +y );
           
            ArrayList<Integer> list_points= new ArrayList<Integer>();
            ArrayList<Integer> list_numpoints= new ArrayList<Integer>();
            databasequery q=new databasequery();
                      
            //Get the coordinates of building containing the selected point
            list_points= q.closesthydrant_vertbuilding(s);
            list_numpoints = q.closesthydrant_numbuilding(s);
            function_draw_building(list_points,list_numpoints,Color.RED);
            
            String s1 = "";
             for(int i=0;i<list_points.size();i++)
             {
                 s1+=list_points.get(i)+",";
             }
             s1+=list_points.get(0)+","+list_points.get(1);
             ArrayList<Integer> list_points1= new ArrayList<Integer>();
             
             //Get the corresponding hydrant of the obtained building 
             list_points1= q. closesthydrant_hydrant(s1);
             function_draw_hydrant(list_points1);
               
        }
        
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_jRadioButton3ActionPerformed
        querynum++;
        String stmt1="  SELECT t.X,t.Y FROM building B, building G, TABLE(SDO_UTIL.GETVERTICES(B.building_shape)) t "
                                + "WHERE SDO_WITHIN_DISTANCE "
                                + "(B.building_shape,G.building_shape,'DISTANCE=100')='TRUE' "
                                + "AND G.building_on_fire='y' \n" 
								+"SELECT (SDO_UTIL.GETNUMVERTICES(B.building_shape)) FROM building B, building G "
                                + "WHERE SDO_WITHIN_DISTANCE "
                                + "(B.building_shape,G.building_shape,'DISTANCE=100')='TRUE' "
                                + "AND G.building_on_fire='y' \n\n" ;
      
        stmt1= "\nQuery: " + querynum + stmt1;
        jTextArea1.append(stmt1);
        Graphics g= jLabel1.getGraphics();
        g.drawImage(campusmap,0 , 0, this);
    
    }
    public void function_draw_hydrant(ArrayList<Integer> list_points)
    {
         Graphics g1 = jLabel1.getGraphics();
         g1.setColor(Color.GREEN);
         System.out.println("\nHydrantcoordinates " + list_points);
         int value=0;
         int i=0;
         for(int j=0;j<list_points.size();j=j+2)
            {
                Rectangle r= new Rectangle();
                r.add(list_points.get(j), list_points.get(j+1));
                g1.fillRect(list_points.get(j), list_points.get(j+1), 15,15);
            }
        
    }
        // TODO add your handling code here:}//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_jRadioButton1ActionPerformed
        Graphics g= jLabel1.getGraphics();
       g.drawImage(campusmap,0 , 0, this);
 
    }//GEN-LAST:event_jRadioButton1ActionPerformed
	
    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_jRadioButton2ActionPerformed
        Graphics g= jLabel1.getGraphics();
        g.drawImage(campusmap,0 , 0, this);
        queryrange=true;  //Set the range query as true
       
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_jRadioButton4ActionPerformed
    	querynum++;
    	String sql1= "  SELECT t.X,t.Y FROM building B, TABLE(SDO_UTIL.GETVERTICES(B.building_shape)) t "
                                + "WHERE SDO_CONTAINS(b.building_shape, "
                                + "SDO_Geometry (2001,null,"
                                + "SDO_POINT_TYPE(c,null),null,null)) = 'TRUE' \n" 
								+"SELECT (SDO_UTIL.GETNUMVERTICES(b.building_shape)) FROM building b "
                                + "WHERE SDO_CONTAINS(b.building_shape,"
                                + " SDO_Geometry (2001,null,"
                                + "SDO_POINT_TYPE(c,null),null,null)) = 'TRUE' \n\n" 
								+"SELECT t.X,t.Y FROM hydrant h, TABLE(SDO_UTIL.GETVERTICES(h.hydrant_coord)) t "
                                + " WHERE SDO_NN(h.hydrant_coord,"
                                + " SDO_Geometry (2003,null,null,"
                                + "SDO_ELEM_INFO_ARRAY(1,1003,1),"
                                + "SDO_ORDINATE_ARRAY(c)),'sdo_num_res=1') = 'TRUE'";
    	sql1= "\nQuery: " + querynum + sql1;
        jTextArea1.append(sql1);
        Graphics g= jLabel1.getGraphics();
        g.drawImage(campusmap,0 , 0, this);
        queryclosesthydrant=true;
        queryrange=false;
        
    }//GEN-LAST:event_jRadioButton4ActionPerformed
      public void function_draw_building(ArrayList<Integer> list_points,ArrayList<Integer> list_numpoints,Color s)
      {
            Graphics2D g1 =  (Graphics2D) jLabel1.getGraphics();
            g1.setColor(s);
            g1.setStroke(new BasicStroke(2));
            int value=0;
            int i=0;
        
           // System.out.println("\nlist_numpoints size "+list_numpoints.size()+" for color"  +s);
                for(int j= 0; j<list_numpoints.size(); j++)
                {
                        Polygon p= new Polygon();
                        value = 0;
                        while(list_numpoints.get(j)*2 >value)
                        {
                         p.addPoint(list_points.get(i), list_points.get(i+1));
                         
                         i+=2;
                         value+=2;
                        }
                        
                        g1.drawPolygon(p); //Draws the buildings 
                     
               }
                    
      }
      
    public static void main(String args[])
	{
           java.awt.EventQueue.invokeLater(new Runnable() {
           public void run(){
             new hw3().setVisible(true);
                
                }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

}
